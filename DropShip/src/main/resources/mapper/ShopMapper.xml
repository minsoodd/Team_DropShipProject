<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.java.mapper.ShopMapper">

	<!--//////////////////       ↓  Work(작품) 관련 ↓         /////////////////////////  -->
	
	<select id="selectWorkList" resultType="com.java.vo.WorkVo" parameterType="map">
	    SELECT * FROM (SELECT ROWNUM rnum, a.* FROM
	    (SELECT w.id AS id, work_name, w.artist_id, work_img_url, work_price, a.artist_korean_name as artist_name, w.work_is_ai
	    FROM Work w JOIN Artist a ON w.artist_id = a.id
	    <choose>
	        <when test="sortType == 'best_sales'">
	            LEFT JOIN Order_Detail od ON w.id = od.work_id
	            LEFT JOIN Work_Option wo ON od.option_id = wo.id
	        </when>
	        <when test="sortType == 'most_reviewed'">
	            LEFT JOIN Work_Review wr ON w.id = wr.work_id
	        </when>
	        <when test="sortType == 'high_rate'">
	            LEFT JOIN Work_Review wr ON w.id = wr.work_id
	        </when>
	    </choose>
	    <where>
	        <choose>
	            <when test="viewOption == 'all'">
	            </when>
	            <when test="viewOption == 'ai_created'">
	                w.work_is_ai = 1
	            </when>
	            <when test="viewOption == 'general'">
	                w.work_is_ai = 0
	            </when>
	        </choose>
	    </where>
	    <choose>
	        <when test="sortType == 'best_sales'">
	            GROUP BY w.id, work_name, w.artist_id, work_img_url, work_price, a.artist_korean_name, w.work_is_ai
	            ORDER BY NVL(SUM(wo.option_quantity), 0) DESC
	        </when>
	        <when test="sortType == 'most_reviewed'">
	            GROUP BY w.id, work_name, w.artist_id, work_img_url, work_price, a.artist_korean_name, w.work_is_ai
	            ORDER BY COUNT(wr.id) DESC
	        </when>
	        <when test="sortType == 'high_rate'">
	            GROUP BY w.id, work_name, w.artist_id, work_img_url, work_price, a.artist_korean_name, w.work_is_ai
	            ORDER BY AVG((NVL(wr.review_rate, 0))) DESC			<!-- LEFT JOIN 했기 떄문에 work_review가 없는 work인 경우 work_review에서 review_rate를 가져오면 null이라서 평균지으면 null이되서 맨 뒤로 가게 됨. 그래서 null이라면 0으로 만들어서 정상적으로 평균을 구함   -->
	        </when>
	        <when test="sortType == 'latest_registration'">
	            ORDER BY w.work_reg_date DESC
	        </when>
	        <when test="sortType == 'highest_to_lowest'">
	            ORDER BY work_price DESC
	        </when>
	        <when test="sortType == 'lowest_to_highest'">
	            ORDER BY work_price ASC
	        </when>
	        <otherwise>
	            ORDER BY w.work_reg_date DESC
	        </otherwise>
	    </choose>
	    ) a)
	    WHERE rnum BETWEEN #{startRow} AND #{endRow}
	</select>


	<select id="selectWorkCount" resultType="int" parameterType="map">
	    SELECT COUNT(*) count
	    FROM Work w JOIN Artist a ON w.artist_id = a.id
	    <where>
	        <choose>
	            <when test="viewOption == 'all'">
	            </when>
	            <when test="viewOption == 'ai_created'">
	                w.work_is_ai = 1
	            </when>
	            <when test="viewOption == 'general'">
	                w.work_is_ai = 0
	            </when>
	        </choose>
	    </where>
	</select>
	
	<!-- 베스트 페이지에서 MD-Pick 슬라이드쇼 랜덤으로 보여질 수 있게 일단 모든 작품 다 가져옴 -->	
	<select id="selectWorkAll" resultType="com.java.vo.WorkVo">
		SELECT * FROM work w 
		JOIN Artist a ON w.artist_id = a.id
		WHERE work_available = 1
	</select>
	
	
	
	<!-- 베스트 가져올 때 사용. 판매량이 있는 작품이 best_num개보다 적을 때 부족한 부분을 전채 work에서 랜덤으로 채우는 함수-->
	<select id="selectRandomWorks" resultType="com.java.vo.WorkVo">
	    SELECT * FROM (
		    SELECT * FROM Work w
		    JOIN Artist a ON a.id = w.artist_id 
		    WHERE w.id NOT IN (
		      SELECT W.id FROM Work W
		      JOIN Order_Detail OD ON W.id = OD.work_id
		      JOIN Work_Option WO ON OD.option_id = WO.id
		      GROUP BY W.id
		      ORDER BY SUM(WO.option_quantity) DESC
		      FETCH NEXT #{best_num} ROWS ONLY
		    )
		    ORDER BY DBMS_RANDOM.VALUE
		  ) R
		  WHERE ROWNUM <![CDATA[<=]]> #{additionalWorksNeeded}
	</select>
	
	
	<!-- 작품 베스트(판매량 상위 best_num개) 가져오기 -->
	<select id="selectWorkBest" resultType="com.java.vo.WorkVo">
		SELECT w.id, w.work_name, w.work_img_url, w.artist_id, 
			w.work_price, a.artist_korean_name <!-- as artist_name --> 
			, SUM(wo.option_quantity) AS total_sale_quantity
		FROM Work w
		JOIN Order_Detail od ON W.id = od.work_id
		JOIN Work_Option wo ON OD.option_id = wo.id
		JOIN Artist a ON w.artist_id = a.id
		GROUP BY w.id, w.work_name, w.work_img_url, w.artist_id, 
				 w.work_price, a.artist_korean_name
		ORDER BY total_sale_quantity DESC
		FETCH NEXT #{best_num} ROWS ONLY
	</select>
	
	<!-- index ai작품 2개 랜덤으로 가져오기 -->
	<select id="selectAiWorks" resultType="com.java.vo.WorkVo">
		SELECT * FROM work 
		JOIN artist a ON a.id = work.artist_id
		WHERE work_is_ai = 1
		ORDER BY DBMS_RANDOM.VALUE
		FETCH NEXT 2 ROWS ONLY
	</select>
	
	<!-- 작품 new 가져오기 -->
	<select id="selectWorkNew" resultType="com.java.vo.WorkVo">
		SELECT * FROM (SELECT rownum rnum, n.* FROM 
		(SELECT w.id AS id, work_name, artist_id, a.artist_korean_name AS artist_name, work_img_url, work_content, work_reg_date
		FROM Work w JOIN Artist a
		on w.artist_id = a.id
		ORDER BY work_reg_date DESC) n )
		WHERE rnum between 1 and 5
	</select>
	
	<!-- 작품(구매창) 1개 가져오기 -->
	<select id="selectWorkBuy" resultType="com.java.vo.WorkVo">
		SELECT * FROM (
	        SELECT w.id AS id, w.work_name, a.id AS artist_id, 
	        	   w.work_genre, w.work_subject, w.work_img_url, w.work_content, w.work_sale, w.work_isBest,
			       w.work_reg_date, w.work_price, w.work_display_position, w.work_hit, w.admin_id, work_available,
			       a.artist_korean_name AS artist_name
	        FROM Work w
	        JOIN Artist a ON w.artist_id = a.id
        ) 
   	    WHERE id = #{work_id}
	</select>
	
	<!-- 작가의 작품들 가져오기 -->
	<select id="selectWorkArtistAll" resultType="com.java.vo.WorkVo">
		SELECT w.id AS id, work_name, artist_id, a.artist_korean_name AS artist_name,
				work_img_url, work_price, work_hit  
		FROM Work w
		JOIN Artist a ON w.artist_id = a.id
		WHERE w.artist_id = #{artist_id}
		ORDER BY work_hit DESC
	</select>  
	


<!-- 전체 검색 -->
	<!-- 전체 검색 -->
	<select id="search" resultType="com.java.vo.WorkVo">
		SELECT w.*, a.id, a.artist_korean_name FROM work w
        JOIN Artist a ON w.artist_id = a.id WHERE 
	 	w.work_name LIKE '%'||#{searchWord}||'%' OR a.artist_korean_name LIKE '%'||#{searchWord}||'%'
	</select>
	<!-- 전체 검색 -->
	<!-- 전체 검색 -->



	<!--//////////////////       ↓  Artist(작가)관련 ↓         /////////////////////////  -->
	
	<!-- 작가 전체 가져오기 -->
	<select id="selectArtistAll" resultType="com.java.vo.ArtistVo">
		SELECT * FROM artist WHERE id = #{artist_id} 
	</select>
	
	<!-- 작가 총 갯수 -->
	<select id="selectArtistCount" resultType="int">
		SELECT COUNT(*) count FROM artist 
	</select>
	
	<!-- index에서 작가별 작가페이지 작가 가져오기 -->
	<select id="selectArtistList" resultType="com.java.vo.ArtistVo">
		SELECT * FROM (SELECT rownum rnum, a.* FROM 
		(SELECT id, artist_korean_name, artist_english_name, artist_img_url 
		FROM artist ORDER BY id asc) a)
		WHERE rnum BETWEEN #{startRow} AND #{endRow}
	</select>
	
	
	<!--//////////////////       ↓  order(주문)관련 ↓         /////////////////////////  -->
	
	<!-- 작품 1개 가져오기 (주문할때 사용)-->
	<select id="selectWorkOneOrder" resultType="com.java.vo.WorkVo">
		SELECT w.id AS id, w.work_name, w.work_img_url ,a.artist_korean_name AS artist_name, 
				w.work_price, w.artist_id
		FROM Work w
		JOIN Artist a ON w.artist_id = a.id
		WHERE w.id = #{id}
	</select>
	
	
	<!-- 회원 주문 저장  -->
<!-- 	<insert id="insertOrder_Member">   -->
<!-- 	  	INSERT INTO Order_Member (id, member_id, order_date, order_status, delivery_id, delivery_name,  -->
<!-- 	  	delivery_phone, delivery_zip, delivery_road, delivery_address, delivery_request) -->
<!-- 		VALUES (Order_Member_SEQ.NEXTVAL, #{member_id}, SYSDATE, 0, #{delivery_id}, #{delivery_name},  -->
<!-- 		#{delivery_phone}, #{delivery_zip}, #{delivery_road}, #{delivery_address}, #{delivery_request}) -->
<!--   	</insert> -->
  	
  	
  	
  	<!-- 회원 주문 저장 후 order_member_seq.currval(회원 주문 고유번호) 가져오기 -->
<!-- 	<select id="selectOrderMemberSeq" resultType="int"> -->
<!-- 		SELECT Order_Member_SEQ.CURRVAL FROM DUAL -->
<!-- 	</select> -->
	
	<!-- 작품 옵션 저장 후 Work_Option_SEQ.CURRVAL(작품 옵션 고유번호) 가져오기 -->
  	<insert id="insertOption" parameterType="com.java.vo.OptionVo">
	    <selectKey resultType="int" keyProperty="id" order="BEFORE">
	        SELECT work_option_seq.nextval FROM dual
	    </selectKey>
	    INSERT INTO work_option VALUES (#{id}, #{option_size}, #{option_size_added_price}, 
		    #{option_media}, #{option_media_price_multiple}, #{option_mattier}, #{option_frame}, #{option_frame_added_price}, 
		    #{option_matt}, #{option_matt_added_price}, #{option_quantity}, #{option_selected_price})
	</insert>
	
	
	
	
	
	
	
<!-- 	회원 주문상세 저장 (cart에서 주문할때도 가능하게)  -->
<!-- 	<insert id="insertOrder_Details" parameterType="java.util.List"> -->		<!-- ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ -->
<!-- 	    INSERT ALL -->
<!-- 	    <foreach collection="workIdList" item="workId" index="index" separator=" "> -->
<!-- 	        INTO order_detail (id, order_member_id, work_id, option_id, total_price, -->
<!-- 	        				event_work_sale, event_period_sale, final_price) -->
<!-- 	        VALUES (Order_Detail_SEQ.NEXTVAL, #{order_member_id}, #{workId}, #{optionIdList[${index}]}, #{total_price},  -->
<!-- 	        0, 0, #{total_price}) -->
<!-- 	    </foreach> -->
<!-- 	    SELECT * FROM DUAL -->
<!-- 	</insert> -->
	
	
	
	
	 
	  
	  
	<!-- 회원 마이페이지주문 상세조회(join5번 하는 경우)  -->
	  <select id="selectOptionOneInquiryView" resultType="com.java.vo.Order_Detail_inquire_viewVo">
	    SELECT om.id, om.order_date, om.delivery_name, om.delivery_phone, om.delivery_zip, om.delivery_road, om.delivery_address, om.delivery_request,
		       wo.option_size, wo.option_size_added_price, wo.option_media, wo.option_media_price_multiple, wo.option_mattier, wo.option_frame,
		       wo.option_frame_added_price, wo.option_matt, wo.option_matt_added_price, wo.option_quantity, wo.option_selected_price,
		       a.artist_korean_name,
		       w.work_name, w.work_price, w.work_img_url, w.id AS work_id,
		       m.member_name, m.member_phone, m.member_zip, m.member_road, m.member_addr, m.member_email
		FROM Order_Member om
		JOIN Order_Detail od ON om.id = od.order_member_id
		JOIN Work_Option wo ON od.option_id = wo.id
		JOIN Work w ON od.work_id = w.id
		JOIN Artist a ON w.artist_id = a.id
		JOIN Member m ON om.member_id = m.id
		WHERE om.id = #{order_member_id}
	  </select>
	<!-- 위 방식은 무식하게 조인으로 한번에 하는 방식. 편하지만 테이블에 데이터 많아지면 느려질 수.  -->
	
	
	  
	  <!-- 회원 주문 상세/ 회원 장바구니 조희용 option객체들 가져오기 -->
<!-- 	  <select id="selectOptionList" resultType="com.java.vo.OptionVo"> -->
<!-- 	  	SELECT * FROM work_option WHERE id IN ( -->
<!--             <foreach collection="optionIdList" item="optionId" separator=","> -->
<!--                 #{optionId} -->
<!--             </foreach> -->
<!--         ) ORDER BY id DESC -->
<!-- 	  </select> -->

	  <select id="selectOptionList" resultType="com.java.vo.OptionVo">
		    <if test="optionIdList != null and optionIdList.size() > 0">
		        SELECT * FROM work_option WHERE id IN (
		            <foreach collection="optionIdList" item="optionId" separator=",">
		                #{optionId}
		            </foreach>
		        ) ORDER BY id DESC
		    </if>
	  </select>
	  
	  <!-- 회원 주문 상세용 work객체들 가져오기 -->
	  <select id="selectShopWorkList" resultType="com.java.vo.WorkVo">
	  	SELECT * FROM work WHERE id = #{workId}
	  </select>
	  
	  
	  <!-- 비교할 작품id들이 담긴 List<Integer>를 받아와서 해당되는 workVo 2개를 List<WorkVo>로 리턴해주기 -->
	  <!-- 비교할 작품id들이 담긴 List<Integer>를 받아와서 해당되는 workVo 2개를 List<WorkVo>로 리턴해주기 -->
	  <select id="selectWorkCompare" resultType="com.java.vo.WorkVo">
	  	SELECT w.*, a.id, a.artist_korean_name FROM work w
        JOIN Artist a ON w.artist_id = a.id
        WHERE w.id IN (
            <foreach collection="compare_work_id_list" item="compare_work_id" separator=",">
                #{compare_work_id}
            </foreach>
        ) 
        ORDER BY w.id DESC
	  </select>
	  <!-- 작품비교를 위해 아이디 값을 원하는 work.id 가져오기 -->
	  <!-- 작품비교를 위해 아이디 값을 원하는 work.id 가져오기 -->
	  
	  
	  <!-- 회원 주문 상세용 Artist객체들 가져오기 -->
	  <select id="selectArtistOrderList" resultType="com.java.vo.ArtistVo">
	  	SELECT artist_korean_name FROM artist WHERE id IN (
            <foreach collection="artistIdList" item="artistId" separator=",">
                #{artistId}
            </foreach>
        ) ORDER BY id DESC
	  </select>
	  
	  
	  
	  
     <!--//////////////////       ↓  Work_Review(작품 리뷰) 관련 ↓         /////////////////////////  -->
     
     <!-- index에서 작품 리뷰 가져오기 -->
	<select id="selectWorkReView" resultType="com.java.vo.WorkReViewVo">
		SELECT wr.id, wr.work_id, member_id, review_rate, review_content, work_name, work_img_url, artist_korean_name AS artist_name, w.artist_id, review_counts.review_count
		FROM work_review wr
		JOIN work w ON wr.work_id = w.id
		JOIN artist a ON w.artist_id = a.id
		JOIN (
		  SELECT work_id, COUNT(*) as review_count
		  FROM work_review
		  GROUP BY work_id
		) review_counts ON w.id = review_counts.work_id
		WHERE wr.id = (
		  SELECT MIN(id)
		  FROM work_review
		  WHERE work_id = wr.work_id
		  AND review_count = review_counts.review_count
		)
		ORDER BY review_counts.review_count DESC
	</select>

	<!-- painting_item에서 작품 1개의 리뷰 가져오기 -->
	<select id="selectWorkReViewOne" resultType="com.java.vo.WorkReViewVo">
		SELECT w.id, work_id, w.member_id, review_date, review_rate, review_title, review_content, member_nName
		FROM work_review w
		JOIN member m ON w.member_id = m.id
		WHERE work_id = #{work_id}
		ORDER BY review_date DESC
	</select>
	 
	<!-- painting_item에서 작품 1개의 리뷰 가져오기 (별점 높은순) -->
	<select id="selectWorkReViewHigh" resultType="com.java.vo.WorkReViewVo">
		SELECT w.id, work_id, w.member_id, review_date, review_rate, review_title, review_content, member_nName
		FROM work_review w
		JOIN member m ON w.member_id = m.id
		WHERE work_id = #{work_id}
		ORDER BY review_rate desc
	</select>
	 
	<!-- painting_item에서 작품 1개의 리뷰 가져오기 (별점 낮은순) -->
	<select id="selectWorkReViewOneLow" resultType="com.java.vo.WorkReViewVo">
		SELECT w.id, work_id, w.member_id, review_date, review_rate, review_title, review_content, member_nName
		FROM work_review w
		JOIN member m ON w.member_id = m.id
		WHERE work_id = #{work_id}
		ORDER BY review_rate asc
	</select> 
	
	<!-- painting_item에서 작품 리뷰 갯수 확인 -->
	<select id="selectWorkReViewCount" resultType="int">
		SELECT COUNT(*) count FROM work_review where work_id = #{work_id}
	</select>
	
    <!-- 작품 리뷰있는지 확인 -->
	<select id="selectMemberWorkReviewCheck" resultType="int">
	  	select count(*) count from work_review where member_id=#{member_id} and work_id = #{work_id}
	</select>
     
	<!-- member 1명의 작품리뷰1개 가져오기 -->
	<select id="selectMemberWorkReViewOne" resultType="com.java.vo.WorkReViewVo">
		SELECT * FROM work_review WHERE member_id = #{member_id} and work_id = #{work_id}
	</select>
	
	<!-- 작품 리뷰 1개 저장 -->
	<insert id="insertWorkReviewOne">
		INSERT INTO work_review VALUES (
			work_review_seq.nextval, #{work_id}, #{member_id}, sysdate,
			#{review_rate}, #{review_title}, #{review_content}
		)
	</insert>
	
	<!-- 작품 리뷰 1개 수정 -->
	<update id="updateMemberWorkReViewOne">
		UPDATE work_review SET review_rate = #{review_rate}, review_title = #{review_title}, review_content = #{review_content}
		WHERE member_id = #{member_id} AND work_id = #{work_id} 
		
	</update>
	
	<!-- 작품 리뷰 1개 삭제 -->
	<delete id="deleteMemberWorkReViewOne">
		DELETE FROM work_review WHERE member_id = #{member_id} AND work_id = #{work_id}
	</delete>
			
</mapper>