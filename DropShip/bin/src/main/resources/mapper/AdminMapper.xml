<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.java.mapper.AdminMapper"> 

	<!-- 	///////////////// ↓ Admin(관리자) 관련 ↓ /////////////////////////  -->

	<!-- admin 로그인 -->
	<select id="adminMemberSelectOne" resultType="com.java.vo.AdminVo">
		SELECT * FROM admin WHERE admin_login_id = #{admin_login_id} AND admin_pw = #{admin_pw}
	</select>
	
	<!-- admin 가입 -->
	<insert id="insertMember">
		INSERT INTO admin VALUES (ADMIN_SEQ.nextval, #{admin_name}, #{admin_login_id}, #{admin_pw}, #{admin_isSuper}, #{admin_phone}, sysdate, #{admin_ban} )
	</insert>
	
	<!-- admin 리스트 정렬 -->
	<select id="selectAdminList" resultType="com.java.vo.AdminVo">
		SELECT * FROM ( SELECT rownum rnum, a. * FROM
    	( SELECT * FROM admin ORDER BY id ) a )
    	WHERE rnum BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<!-- admin 개수 확인 -->
	<select id="selectCount" resultType="int">
		SELECT COUNT(*) count FROM admin
	</select>
	
	<!-- admin 1개 정보 가져오기 -->
	<select id="selectOne" resultType="com.java.vo.AdminVo">
		SELECT * FROM admin WHERE id = #{id}
	</select>
	
	<!-- admin 1개 전번&상태 변경하기 -->
	<update id="updateAdminData">
		UPDATE admin SET admin_phone = #{admin_phone}, admin_isSuper = #{admin_isSuper}, admin_ban = #{admin_ban} WHERE admin_login_id = #{admin_login_id}
	</update>
	
	<!-- admin 1개 PW 변경하기 -->
	<update id="updateAdminPW">
		UPDATE admin SET admin_pw = #{admin_pw} WHERE admin_login_id = #{admin_login_id}
	</update>
	
	<!-- admin 1개 삭제하기 -->
	<delete id="admin_memberDelete">
		DELETE FROM admin WHERE admin_login_id = #{admin_login_id}
	</delete>
	
	
	<!-- admin 1개 확인하기 -->
	<select id="adminMemberCheckId" parameterType="String" resultType="int">
		SELECT COUNT(id) FROM admin WHERE admin_login_id = #{admin_login_id}
	</select>
	
	<!-- ///////////////      ↓  Artist(작가) 관련  ↓        ///////////////////////  -->
	
	<!-- 작가 리스트 가져오기 -->
	<select id="selectArtistAll" resultType="com.java.vo.ArtistVo">
		SELECT * FROM artist ORDER BY id DESC
	</select>
	
	<!-- 작가 리스트 가져올 때 등록된 작품들도 가져오기 -->
	<select id="selectWorksByArtist" resultType="com.java.vo.WorkVo">
    	SELECT * FROM work WHERE artist_id = #{id}
	</select>
	
	<!-- 회원이 ai그림생성 시 이미 부여받은 artist_id가 있으면 그 id리턴하고 처음 하는거면 null 리턴 -->
	<select id="selectArtistIdForAi" parameterType="java.lang.String" resultType="java.lang.Integer">
	  SELECT id FROM artist WHERE artist_korean_name = #{member_nName}
	</select>
	
	
	<!-- ai작품 등록때문에 artist 저장 메소드 다시 만듦 -->
  	<insert id="insertArtist">			
	    <selectKey resultType="int" keyProperty="id" order="AFTER">
	        SELECT ARTIST_SEQ.currval FROM dual
	    </selectKey>
	    INSERT INTO artist VALUES(artist_seq.nextval, #{artist_korean_name}, #{artist_english_name}, 
	  	#{artist_img_url}, #{artist_country}, #{artist_birth_death}, #{artist_main}, #{artist_content})
	</insert>


	<!-- 익명 작가 저장 -->	
	<insert id="insertAnonymousArtist">  
	  	INSERT INTO artist VALUES(artist_seq.nextval, #{artist_korean_name}, #{artist_english_name}, 
	  	#{artist_img_url}, #{artist_country}, #{artist_birth_death}, #{artist_main}, #{artist_content})
  	</insert>
  	
	<!-- 익명 작가 저장 후 artist_seq.currval 값 가져오기-->	
	<select id="selectCurrval" resultType="String">  
		SELECT artist_seq.currval FROM DUAL
  	</select>
  	
  	
  	<!-- 작가 업데이트 -->
  	<update id="updateArtistOne">
	  UPDATE artist SET 
	        artist_korean_name = #{artist_korean_name},
		    artist_english_name = #{artist_english_name},
		    artist_img_url = #{artist_img_url},
		    artist_country = #{artist_country},
		    artist_birth_death = #{artist_birth_death},
		    artist_main = #{artist_main},
		    artist_content = #{artist_content}
	    WHERE id = #{id}
 	</update>
 	
 	<!-- 작가 삭제 -->
  	<delete id="deleteArtist">
  		DELETE FROM artist WHERE id = #{id}
  	</delete>
  	
  	<!-- 작가 상세 가져오기 -->
  	<select id="selectArtistOne" resultType="com.java.vo.ArtistVo">
  		SELECT * FROM artist WHERE id = #{id}
	</select>
  	
  	
  	<!--//////////////////       ↓  Work(작품) 관련 ↓         /////////////////////////  -->
  	
  	
  	<!-- 작품 리스트 가져오기 -->
	<select id="selectWorkAll" resultType="com.java.vo.WorkVo">
		SELECT w.id AS id, w.work_name, a.artist_korean_name AS artist_name, w.artist_id,
				w.work_price, w.work_available, w.work_isBest, w.work_reg_date, w.work_is_ai
		FROM Work w
		JOIN Artist a ON w.artist_id = a.id
		ORDER BY work_reg_date DESC
	</select>
  	

 	<!-- 작품 등록 창에서 아티스트 이름 입력받고 아티스트 고유번호 확인 클릭 시 artist테이블에 존재하면 그 artist의 id고유번호 리턴,
 		artist테이블에 존재하지 않으면 0을 리턴. resultType을 int가 아니라 Integer로 해야.-->
	<select id="checkArtistId" resultType="Integer" parameterType="string">  
	  	SELECT ID
		FROM artist
		WHERE artist_korean_name = #{artist_korean_name}
		FETCH FIRST 1 ROW ONLY
	</select>
  	
	<!-- 작품 Work 저장 -->
<!-- 	<insert id="insertWork">   -->
<!-- 		INSERT INTO work ( -->
<!-- 			id, work_name, artist_id, work_genre, work_subject, work_img_url, -->
<!-- 			work_content, work_isBest, work_reg_date, work_price, admin_id, work_available -->
<!-- 		) -->
<!-- 		VALUES ( -->
<!-- 			work_seq.nextval, #{work_name}, #{artist_id},  -->
<!-- 		  	#{work_genre}, #{work_subject}, #{work_img_url}, #{work_content}, #{work_isBest}, sysdate, -->
<!-- 		  	#{work_price}, #{admin_id}, #{work_available} -->
<!-- 	  	) -->
<!--   	</insert> -->
  	
  	
	<!-- 작품 Work 저장 (ai생성작품도 가능하도록 is_ai컬럼도 추가함)-->
	<insert id="insertWork">
		INSERT INTO work (
			id, work_name, artist_id, work_genre, work_subject, work_img_url, work_content, 
			work_isBest, work_reg_date, work_price, admin_id, work_available, work_is_ai
			<if test="work_ai_prompt != ''">, work_ai_prompt</if> )
		VALUES (
			work_seq.nextval, #{work_name}, #{artist_id},
			#{work_genre}, #{work_subject}, #{work_img_url}, #{work_content}, #{work_isBest}, sysdate,
			#{work_price}, #{admin_id}, #{work_available}, #{work_is_ai}
			<if test="work_ai_prompt != ''">, #{work_ai_prompt}</if> )
	</insert>
  	
  	<!-- 작품 삭제 -->
  	<delete id="deleteWork">
  		DELETE FROM work WHERE id = #{id}
  	</delete>
  	
  	<!-- 작품 상세 관리 페이지 -->
  	<select id="selectWorkOne" resultType="com.java.vo.WorkVo">
  		SELECT * FROM (
	        SELECT w.id AS id, w.work_name, a.id AS artist_id, a.artist_korean_name AS artist_name,
			       w.work_genre, w.work_subject, w.work_img_url, w.work_content, w.work_sale, w.work_isBest,
			       w.work_reg_date, w.work_price, w.work_display_position, w.work_hit, w.admin_id, w.work_available, w.work_is_ai, w.work_ai_prompt
	        FROM Work w
	        JOIN Artist a ON w.artist_id = a.id
        ) 
   	    WHERE id = #{id}
	</select>
	
	
  	<!-- 작품 업데이트 -->
  	<update id="updateWorkOne">
	  UPDATE work SET 
	        work_name = #{work_name},
	        artist_id = #{artist_id},
	        work_genre = #{work_genre},
	        work_subject = #{work_subject},
	        work_img_url = #{work_img_url},
	        work_content = #{work_content},
	        work_isBest = #{work_isBest},
	        work_price = #{work_price},
	        admin_id = #{admin_id},
	        work_available = #{work_available}
	    WHERE id = #{id}
 	</update>
	
	
	
	
	
</mapper>